package Chess;

public class Pawn extends  ChessPiece{

    //Реализуйте конструктор, который будет принимать цвет фигуры.
    public Pawn(String color) {
        super(color);
    }

    //Реализуйте метод getColor() так, чтобы он возвращал цвет фигуры.
    @Override
    public String getColor() {
        return  String.valueOf(getColor().equals("P"));

    }

    //Реализуйте метод canMoveToPosition() так, чтобы пешка не могла выйти за доску
    //и могла ходить только вперед. Помните, что первый ход пешка может сдвинуться
    //на 2 поля вперед, сделать это можно, например, сравнив координаты.
    //То есть, если пешка белая (color.equals("White")) и находится в line == 1,
    //то она может пойти на 2 поля вперед, иначе — нет, аналогично с черными пешками.
    //Также фигура не может сходить в точку, в которой она сейчас находится.
    //Если пешка может пройти от точки (line, column) до точки (toLine, toColumn)
    //по всем правилам (указанным выше), то функция вернет true, иначе — false.
    @Override
    public boolean canMoveToPosition(ChessBoard chessBoard, int line, int column, int toLine, int toColumn) {
        return false;
    }

    //Реализуйте метод getSymbol так, чтобы он возвращал символ фигуры, в нашем случае пешка — это P.
    @Override
    public String getSymbol() {
        return String.valueOf(getSymbol().equals("P"));

    }


    }


//        Задача 3
//        Создайте класс Pawn (пешка), который так же, как и Horse, должен быть наследником класса ChessPiece.
//        Реализуйте в классе Pawn, всё тоже самое, что и в классе Horse.
//        В классе Pawn:
//        //Реализуйте конструктор, который будет принимать цвет фигуры.
//        //Реализуйте метод getColor() так, чтобы он возвращал цвет фигуры.
//        //Реализуйте метод canMoveToPosition() так, чтобы пешка не могла выйти за доску
//        //и могла ходить только вперед. Помните, что первый ход пешка может сдвинуться
//        //на 2 поля вперед, сделать это можно, например, сравнив координаты.
//        //То есть, если пешка белая (color.equals("White")) и находится в line == 1,
//        //то она может пойти на 2 поля вперед, иначе — нет, аналогично с черными пешками.
//        //Также фигура не может сходить в точку, в которой она сейчас находится.
//        //Если пешка может пройти от точки (line, column) до точки (toLine, toColumn)
//        //по всем правилам (указанным выше), то функция вернет true, иначе — false.
//        //Реализуйте метод getSymbol так, чтобы он возвращал символ фигуры, в нашем случае пешка — это P.
//        Также вы можете добавить и свои методы для удобства.